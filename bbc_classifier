# We downloaded a BBC news dataset, and we're going to train a ML model to recognize the topic of the news

import numpy as np
import pandas as pd

df = pd.read_csv('/Users/stefanofreyr/Downloads/bbc-text.csv',sep=',')

df.head()

# showing how many articles belong to each category in the whole dataset

df['category'].value_counts()

# importing train-test split from sklearn

from sklearn.model_selection import train_test_split

# X is our feature data

X = df['text']

# y is the categories

y = df['category']

# tuple packing for the X and y, train and test sets

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state=42)

# just looking at the shape of the data...

print(X_train.shape)
print(X_test.shape)

# performing some important imports...

from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.feature_extraction.text import TfidfVectorizer

# pipeline will be a list of tuples representing the actions to be performed

text_clf = Pipeline([('tfidf',TfidfVectorizer()),
                     ('clf',MultinomialNB())])

text_clf.fit(X_train,y_train)

# save the predictions in a variable

predictions = text_clf.predict(X_test)

from sklearn.metrics import confusion_matrix, classification_report, accuracy_score

print(confusion_matrix(y_test, predictions))

print(classification_report(y_test, predictions))

print(accuracy_score(y_test, predictions))

# now I try to predict the class of a sentence taken from a BBC website article - I expect the class to be 'politics'

print(str(text_clf.predict(['Leading Democrats and a few Republicans have condemned Mr Trump s decision, saying it undermined the justice system'])[0]))
